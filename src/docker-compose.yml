version: '3.7'
include:
  - milvus-standalone-docker-compose.yml  #with serviceB declared

services:
    # minio:
    #     restart: always
    #     image: minio/minio@sha256:2c8ac2a6255a2fa7b73a0a3647314c07121432b8ca1ce4ed8bfe31ca8495d7f7
    #     container_name: mlflow_s3
    #     ports:
    #         - "9000:9000"
    #         - "9001:9001"
    #     command: server /data --console-address ':9001' --address ':9000'
    #     environment:
    #         - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
    #         - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    #     volumes:
    #         - ./minio_data:/data


    s3:
        restart: always
        image: minio/minio
        container_name: mlflow_minio
        volumes:
            - ./minio_data:/data
        ports:
            - "9000:9000"
            - "9001:9001"
        networks:
            - frontend
            - backend
        environment:
            - MINIO_ROOT_USER=${MINIO_ROOT_USER}
            - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
        command: server /data --console-address ':9001' --address ':9000'
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3

    db:
        restart: always
        image: mysql/mysql-server@sha256:5b40d96b11333570143d98d3a74100fefadb9abb17b27a95dbc9ad33544ec142
        container_name: mlflow_db
        networks:
            - backend
        ports:
            - "3307:3306"
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        volumes:
            - ./dbdata:/var/lib/mysql

    # mlflow_server:
    #     restart: always
    #     build: ./mlflow
    #     image: mlflow_server
    #     container_name: mlflow_server
    #     depends_on:
    #         - mc
    #         - db
    #     ports:
    #         - "5001:5000"
    #     environment:
    #         - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    #         - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    #         - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    #     command: mlflow server --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE} --default-artifact-root s3://mlflow/ --host 0.0.0.0

    tracking_server:
        restart: always
        build: ./mlflow
        image: mlflow_server
        container_name: mlflow_server
        depends_on:
            - db
        ports:
            - "5001:5000"
        networks:
            - frontend
            - backend
        environment:
            - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
            - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
            - MLFLOW_S3_ENDPOINT_URL=http://s3:9000
            - MLFLOW_S3_IGNORE_TLS=true
        command: >
            mlflow server
            --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE}
            --host 0.0.0.0
            --serve-artifacts
            --artifacts-destination s3://mlflow
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:5000/"]
            interval: 30s
            timeout: 10s
            retries: 3


    label-studio:
        image: heartexlabs/label-studio:latest
        container_name: label-studio
        ports:
            - "8080:8080"  # Map Label Studio's port 8080 to your local machine's port 8080
        volumes:
            - ./annotation:/label-studio/data  # Mount a local directory for Label Studio data
        environment:
            LABEL_STUDIO_PORT: "8080"  # Optional: Set Label Studio's port via environment variable
            LABEL_STUDIO_HOST: 0.0.0.0  # Allows access from any host
            LABEL_STUDIO_USER_TOKEN: ${LABEL_STUDIO_USER_TOKEN}
    aiapi:
        build: .
        # command: gunicorn -w 4 --bind 0.0.0.0:12001 app:app
        command: python app.py
        # volumes:
        #     - . :/app
        ports:
            - "12001:12001"
        env_file:
            - .env
        deploy:
            resources:
                reservations:
                    devices:
                        - driver: nvidia
                          count: all
                          capabilities: [gpu]
        # environment:
        #     FLASK_ENV: development  # Set to 'production' in a production environment
        #     APIMODE: production
        #     PROJECTPATH: /app
volumes:
    dbdata:
    minio_data:
    annotation:

networks:
    frontend:
      driver: bridge
    backend:
      driver: bridge